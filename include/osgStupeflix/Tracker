#pragma once

#include <cfloat>
#include <osg/Uniform>
#include <osg/Referenced>
#include <osg/ImageStreamProxy>
#include <osg/MatrixTransform>

#define MIN(a, b) ((a < b) ? a : b)
#define MAX(a, b) ((a > b) ? a : b)

namespace osgStupeflix {

  /*
  ** Abstract Tracker class
  */
  class OSG_EXPORT Tracker : public osg::Referenced {

      static const int DEFAULT_FRAMERATE = 30;
      static const int DEFAULT_PAGE_SIZE_SECOND = 30;
      static const int DEFAULT_BUFFER_PAGE_SIZE = DEFAULT_FRAMERATE * DEFAULT_PAGE_SIZE_SECOND;

      public:
          /*
          ** Constructor
          ** Parameters :
          ** center : the position of the tracker (in percent of the screen) will be set in this uniform
          ** size : the size of the tracker (in percent of the screen) will be set in this uniform
          ** [startTime] : the time when the tracker will start
          ** [endTIme] : the time when the tracker will stop
          */
          Tracker(osg::Vec2 const &center, osg::Vec2 const &size,
                  double startTime = 0, double endTime = DBL_MAX);

          bool match(const unsigned char *frameData,
                     unsigned int width,
                     unsigned int height, double time);


          virtual osg::Vec2 doMatching(const unsigned char *frameData,
                                        unsigned int width,
                                        unsigned int height) = 0;

          osg::MatrixTransform *addNode(osg::Node *node);

          // value : should be between 0.0 and 1.0. 0.0 meens no smoothness and 1.0 meens no movement
          void  setSmoothness(float value);

          // updateMatrix : Matrix which be applied on the tracker's translation (take a look at osgStupeflix/TrackingMatrixUtils)
          void  setUpdateMatrix(osg::Matrix const &updateMatrix);

          // updateVector : Vector which be applied on the tracker's translation
          void  setUpdateVector(osg::Vec2 const &vector);

          // values between 0.0 and 1.0
          bool  clip(float x1, float y1, float x2, float y2);

          // value between 0.0 and 1.0
          void  slowArea(float x1, float y1, float x2, float y2);

          // power of slow interpolation
          void slowPower(float power);

          // if true, stop the movement if the tracker exit the clip zone
          void continious(bool continious);



          void  setCenterUniform(osg::Uniform *center);
          void  setSizeUniform(osg::Uniform *size);

          inline double startTime() const { return _startTime; }
          inline double endTime() const { return _endTime; }
          virtual ~Tracker();

      private:
          Tracker(Tracker const &) {};

          Tracker &operator=(Tracker const &) {return *this;};

          struct Box {
              inline Box()
                : x1(0), y1(0), x2(0), y2(0)
              {}

              inline Box(float _x1, float _y1, float _x2, float _y2)
                : x1(_x1), y1(_y1), x2(_x2), y2(_y2)
              {}

              float x1;
              float y1;
              float x2;
              float y2;
          };

          double _startTime;
          double _endTime;

          osg::Vec2 _origCenter;
          osg::Vec2 _origSize;

          osg::ref_ptr<osg::MatrixTransform> _node;

          osg::Vec2 _updateVector;

          Box _clip;
          Box _slowArea;

          float _slowPower;

          bool _continious;
          bool _stop;

          bool _prevSpeedCoef;

          int  _prevFrame;
      protected:
          float _rangeValue(float value, float min, float max);
          float _getSpeedCoef(osg::Vec2 const &pos);
          void _setTranslation(osg::Vec2 const &new_center, float aspect_ratio);
          void _setScaling(osg::Vec2 const &new_size);
          bool _isAlreadyMatched(int currentFrame);

          osg::Vec2 const &_seek(int currentFrame);
          void _saveResult(int currentFrame);

          double _smoothness;
          osg::Matrix _updateMatrix;

          unsigned int _bufferPageSize;

          unsigned int _currentIndex;
          unsigned int _maxIndex;
          std::vector<osg::Vec2> _saveBuffer;

          osg::Vec2 _prev_center;
          osg::Vec2 _prev_translate;

          osg::Uniform *_centerUniform;
          osg::Uniform *_sizeUniform;
  };
}
